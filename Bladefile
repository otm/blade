local sh = require('sh')

--<version> [name] [description] - cross compile and create release on Github
function target.release(version, name, description)
	assert(version, "fatal: no version specified")

	name = name or string.format("blade %s", version)
	description = description or string.format("blade %s", version)

	if not string.match(version, "^v%d[.]%d[.]%d$") then
		error("fatal: version must be on the form 'vX.X.X'")
	end

	exitCode, output = blade._exec('git status --porcelain')
	if output ~= "" then
		error("fatal: uncommited changes")
	end

	target.build()
	blade.sh('git tag ' .. version)
	blade.sh('git push --tags')

	blade.sh(string.format("github-release release --user otm --repo blade --tag %s --name '%s' --description '%s'", version, name, description))

	for file in io.popen("ls -1 blade_*"):lines() do
		code = blade.system(string.format("github-release upload --user otm --repo blade --tag %s --name %s --file %s", version, file, file))
		blade.printStatus(file, code)
	end
end

blade.flag(target.release, function(flag)
	flag:string("version", "version", "The version to release", function()
		return sh.git("tag"):stdout()
	end)
	flag:stringArg("name", 1, "The name of the release")
	flag:stringArg("description", 1, "The description of the release")
end)

-- blade.compgen(target.release, function(compWords, compCWord)
-- 	if compCWord == 1 then
-- 		code, out = blade._sh("git tag")
-- 		return out
-- 	end
-- end)

--clean working directory of builds
function target.clean()
	blade.exec("rm blade blade_*")
end

--cross compile
function target.build()
	sh.go("generate")
	go("gox")
end

--download, install and setup gox for cross compile
function target.goxSetup()
	blade.sh("go get github.com/mitchellh/gox")
	blade.sh("go install github.com/mitchellh/gox")
	go("gox -build-toolchain", {sudo=true})
end

function go(cmd, options)
	code, gopath = blade.system("go env GOPATH")
	gopath = (gopath:gsub("^%s*(.-)%s*$", "%1"))
	cmd = gopath .. "/bin/" .. cmd
	if options and options.sudo then
		cmd = "sudo " .. cmd
	end

	return blade.sh(cmd)
end

-- Showcase how to use flags and bash completion
function target.flags(flag)
	for k,v in pairs(flag) do
		print(k,v)
	end
end

blade.flag(target.flags, function(flag)
	flag:int("build", 0, "The build to release", function()
		return 1,2,3,4,5,6
	end)

	flag:string("folder", "", "The folder to release from", function(arg)
		function foo(...)
			return arg
		end

		return foo(sh.glob(arg .. "*"))
	end)

	flag:stringArg("name", 1, "Your name", function(arg)
		return "hej", "foo", "fim"
	end)
end)
