
function target.release(version, name, description)
	if version == nil then
		print("fatal: no version specified")
		return
	end

	name = name or string.format("blade %s", version)
	description = description or string.format("blade %s", version)

	if not string.match(version, "^v%d[.]%d[.]%d$") then
		print("fatal: version must be on the form 'vX.X.X'")
		return
	end

	exitCode, output = blade._exec('git status --porcelain')
	if output ~= "" then
		print("fatal: uncommited changes")
		return
	end

	target.build()
	blade.sh('git tag ' .. version)
	blade.sh('git push --tags')

	blade.sh(string.format("github-release release --user otm --repo blade --tag %s --name '%s' --description '%s'", version, name, description))

	code, out = blade.system("ls -1 blade_*")
	for file in out:gmatch"(.-)\n" do
		code = blade.system(string.format("github-release upload --user otm --repo blade --tag %s --name %s --file %s", version, file, file))
		blade.printStatus(file, code)
	end
end

blade.help(target.release, "<version> [name] [description] - cross compile and create release on Github")


function target.clean()
	blade.exec("rm blade blade_*")
end

blade.help(target.clean, " - clean working directory of builds")

function target.build()
	blade.sh("gox")
end

blade.help(target.build, " - cross compile")
