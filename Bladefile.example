sh = require("sh")

-- The setup function is run before any other target
function blade.setup(target)
	if target == "setup" then
		print("setup: Executed before target")
	end
end

-- The teardown function is run after the blade target
function blade.teardown(target)
	if target ~= "setup" then return end
	print("teardown: executed after target")
end

-- utilize setup and teardown functionality
function target.setup()
	print("Example on using setup/teardown")
end

-- By defining a blade.default function we can run an action if the
-- no target was defined on the command line.
-- Without specifying a blade.default function a help message will be displayed

-- display HOME environment variable
function blade.default()
	print("Example on overriding `blade.default`")
end

-- read the HOME environment variable
function target.environment()
	print("========= ENV =========")
	print("HOME: ", os.getenv("HOME"))
	print("=======================")
end



-- Define a "watch" target and setup the watcher
-- callback can be a closure or a reference to a function
-- dir is a file or directory
-- recursivly watch files (default false)
-- filter is a regexp for files to include (default all files)
-- exclude is a table with directories to not include when recursivly watching files
--
-- excluding large directories can greatly improve speed
-- NOTE: The regexp in filter is a Go regexp and not Lua

-- watch txt files in .
function target.watch()
	blade.plugin.watch{callback=notExported, dir=".", recursive=false, filter=".*\\.txt", exclude={"project"}}
end

-- To showcase how to use a function reference in the watcher, see target.watch
function notExported(file, op)
  print("Handle watched call: " .. file .. " (" .. op .. ")")
end

-- Define a Hello world target with a input from the command line
function target.hello(use)
	use = use or "lua"

  if use == "shell" then
		sh.echo("hello world"):print()
  elseif use == "lua" then
    print("hello world")
  else
    print("unknown option: " .. use)
  end
end

-- Adding a bash completion lookup function for the target
blade.compgen(target.hello, function(compWords, compCWords)
	return compCWords == 1 and "lua shell" or ""
end)

-- Adding a help message to the "hello" target, overriding the comment on the target function
blade.help(target.hello, "<lua|shell>")

-- showcase how to read on all command line parameters
function target.glob(...)
	print("Number of inputs: ", arg.n)
  for k, v in ipairs(arg) do
    print(k, "=", v)
  end
end

-- showcase the printStatus functionality
function target.printStatus()
  -- output command status
  blade.printStatus("true", true)
  blade.printStatus("false", false)
  blade.printStatus("0", 0)
  blade.printStatus("1", 1)
  blade.printStatus("nil")
	blade.printStatus("true (shell)", sh("true"):success())
	blade.printStatus("false (shell)", sh("false"):success())
end

-- showcase automatic command abort when shell command returns non-zero exit code
function target.fail()
	sh.echo("Commands that execute successfully are ok"):print():ok()

	sh.echo("However, the script will abort if we execute a command that fails")
	sh("false"):ok()

	sh.echo("So this is never printend"):print()
end

function target.foo()
  -- capture exit status and command output
  exitStatus, out = blade.sh("echo 'Blade runner'")
  print("Exit: " .. exitStatus .. ", Output: ".. out)

  -- no echo of running command
  blade._sh("echo 'no cmd echo'")

  -- do not break on command error
  blade.exec("false")

  -- automaticly break on errors
	blade.sh("date -r")

  -- this statement is unreachable due to error on previus statement
  blade.sh([[echo "this should not run"]])
end

-- files lists all Go files in the directory
function target.files()
	-- list with grep (globing files does not work)
	for file in sh.ls():grep(".go"):lines() do
		print("File:", file)
	end

	print("\n-------\n")

	-- however we can evaluate it in the shell
	for file in sh.sh("-c", "ls *.go"):lines() do
		print("File:", file)
	end

end

-- showcase how to split strings
function target.split()
	out = "first\nsecond"

	print("Split line with iterator:")
	for line in out:split("\n") do
		print("i", line)
	end

	print("\nSplit line with callback:")
	out:split("\n", function(line)
		print("cb", line)
	end)

	-- this can be done on commands directly
	print("\nIterate lines on shell command:")
	for line in sh.ls():lines() do
		print("sh", line)
	end
end

-- iterate columns, execute ps and returns CMD
function target.columns()
	-- this can be done on commands directly
	print("\nIterate lines and column on shell command:")
	for line in sh.ps():lines() do
		print(line:c(4))
	end
end
